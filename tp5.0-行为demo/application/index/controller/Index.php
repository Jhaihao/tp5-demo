<?php
//<修改>
namespace app\index\controller;

use think\Hook;

class Index
{
    /*
    行为（Behavior）是ThinkPHP扩展机制中比较关键的一项扩展，行为既可以独立调用，也可以绑定到某个标签中进行侦听，
    在官方提出的CBD模式中行为也占了主要的地位，可见行为在ThinkPHP框架中意义非凡。
    这里指的行为是一个比较抽象的概念，你可以把行为想象成在应用执行过程中的一个动作或者处理。在框架的执行流程中，
    例如路由检测是一个行为，静态缓存是一个行为，用户权限检测也是行为，大到业务逻辑，小到浏览器检测、多语言检测等等都可以当做是一个行为，
    甚至说你希望给你的网站用户的第一次访问弹出Hello，world！这些都可以看成是一种行为，行为的存在让你无需改动框架和应用，而在外围通过扩
    展或者配置来改变或者增加一些功能。而不同的行为之间也具有位置共同性，比如，有些行为的作用位置都是在应用执行前，有些行为都是在模板输出之后，
    我们把这些行为发生作用的位置称之为标签（位），当应用程序运行到这个标签的时候，就会被拦截下来，统一执行相关的行为，
    类似于AOP编程中的“切面”的概念，给某一个切面绑定相关行为就成了一种类AOP编程的思想。

    引用了官方的说明, 在说下我对行为的理解：我个人喜欢把他叫HOOK 钩子

    钩子(hook)就像一个”陷阱”、”监听器”, 当A发送一个消息到B时，当消息还未到达目的地B时，被钩子拦截调出一部分代码做处理，
    这部分代码也叫钩子函数或着叫做 行为(behavior)

    */
    public function index()
    {
        $params = [
            'age' => 12,
            'name' => 'myname',
        ];
        Hook::listen('login',$params);

        //Hook::listen('login', $request);  //可以传参

        //module_init钩子就传入了$request参数，也就是执行的行为会传入当前请求对象作为第一个参数，
        //钩子如果有定义第二个参数的话，则会作为行为方法的第二个参数传入，由于系统设计原因，行为方法最多只能支持传入二个参数，
        //并且第一个参数是引用传值。
        //例如，我们可以把该钩子设计改为：
    }
}
